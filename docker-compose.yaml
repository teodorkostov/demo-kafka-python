---
version: '3'
services:
  # schema-registry:
  #   image: confluentinc/cp-schema-registry:7.2.1
  #   hostname: schema-registry
  #   container_name: schema-registry
  #   ports:
  #     - '8081:8081'
  #   environment:
  #     SCHEMA_REGISTRY_HOST_NAME: schema-registry
  #     SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081

  zookeeper:
    image: confluentinc/cp-zookeeper:7.2.1
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000

  kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: kafka
    depends_on:
      - zookeeper
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_INTERNAL://kafka:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1

  init-kafka:
    image: confluentinc/cp-kafka:7.2.1
    container_name: init-kafka
    depends_on:
      - kafka
    entrypoint: [ '/bin/sh', '-c' ]
    command: |
      "
      # blocks until kafka is reachable
      kafka-topics --bootstrap-server kafka:29092 --list

      echo -e 'Creating kafka topics'
      kafka-topics --bootstrap-server kafka:29092 --create --if-not-exists --topic my-topic-1 --replication-factor 1 --partitions 1

      echo -e 'Successfully created the following topics:'
      kafka-topics --bootstrap-server kafka:29092 --list

      sleep 5
      "

  influxdb:
    image: influxdb:2.4.0-alpine
    container_name: influxdb
    ports:
      - 8086:8086
    environment:
      DOCKER_INFLUXDB_INIT_MODE: setup
      DOCKER_INFLUXDB_INIT_USERNAME: username
      DOCKER_INFLUXDB_INIT_PASSWORD: password
      DOCKER_INFLUXDB_INIT_ORG: org
      DOCKER_INFLUXDB_INIT_BUCKET: test
      DOCKER_INFLUXDB_INIT_ADMIN_TOKEN: token

  telegraf:
    image: telegraf:1.23.4-alpine
    container_name: telegraf
    depends_on:
      - init-kafka
      - influxdb
    volumes:
      - "${PWD}/telegraf.conf:/etc/telegraf/telegraf.conf:ro"

# docker run --rm -d -v $PWD/telegraf.conf:/etc/telegraf/telegraf.conf:ro --network demo-kafka-python_default --name telegraf telegraf:1.23.4-alpine
# docker run --rm -d --network demo-kafka-python_default -p 8086:8086 --name influxdb influxdb:2.4.0-alpine
